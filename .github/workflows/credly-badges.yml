# .github/workflows/credly-badges.yml
name: Credly Badges

on:
  workflow_dispatch:
  schedule:
    - cron: '0 7 * * *'  # daily at 07:00 UTC

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Create updater script
        run: |
          cat > credly_update.py << 'PY'
          import json, re, datetime, html, os, hashlib
          from pathlib import Path
          from urllib.request import Request, urlopen
          from urllib.error import HTTPError, URLError

          BASE = "https://www.credly.com/users/jason-gardner.a0afe0ad/badges.json"
          UA   = "Mozilla/5.0 (GitHubActions Credly Fetcher)"
          START = "<!--START_SECTION:badges-->"
          END   = "<!--END_SECTION:badges-->"

          def fetch_all():
              out=[]
              for page in range(1,51):
                  url=f"{BASE}?page={page}"
                  try:
                      req=Request(url, headers={"User-Agent":UA})
                      with urlopen(req, timeout=30) as r:
                          data=json.loads(r.read().decode("utf-8"))
                  except (HTTPError, URLError):
                      break
                  items = data if isinstance(data,list) else (data.get("data") or data.get("badges") or [])
                  if not items: break
                  out.extend(items)
              return out

          def get(d,*ks,default=None):
              cur=d
              for k in ks:
                  if not isinstance(cur,dict): return default
                  cur=cur.get(k)
              return default if cur is None else cur

          def normalize_img(u):
              return re.sub(r"/size/\d+x\d+/", "/size/110x110/", u) if u else u

          def download_image(url: str, dest: Path) -> str:
              dest.mkdir(parents=True, exist_ok=True)
              h=hashlib.sha1(url.encode()).hexdigest()[:8]
              ext=os.path.splitext(url.split("?")[0])[1].lower()
              if ext not in (".png",".jpg",".jpeg",".webp",".gif"): ext=".png"
              tmp=dest/f"tmp-{h}{ext}"
              out=dest/f"{h}{ext}"
              req=Request(url, headers={"User-Agent":UA})
              with urlopen(req, timeout=30) as r:
                  data=r.read()
                  ctype=(r.headers.get("Content-Type") or "").lower()
              if "jpeg" in ctype and ext not in (".jpg",".jpeg"): out=dest/f"{h}.jpg"
              elif "png" in ctype and ext!=".png": out=dest/f"{h}.png"
              elif "webp" in ctype and ext!=".webp": out=dest/f"{h}.webp"
              tmp.write_bytes(data)
              if out.exists():
                  if out.read_bytes()!=data:
                      out.write_bytes(data)
                  tmp.unlink(missing_ok=True)
              else:
                  tmp.replace(out)
              return f"badges/{out.name}"

          # 1) Build new HTML
          raw = fetch_all()
          items=[]
          for b in raw:
              issued = get(b,"issued_at") or get(b,"issued_at_date") or get(b,"created_at") or ""
              try:
                  dt=datetime.datetime.fromisoformat(issued.replace("Z","+00:00"))
              except Exception:
                  dt=datetime.datetime.min
              img = normalize_img(get(b,"image_url") or get(b,"badge_template","image_url"))
              bid = get(b,"id")
              link = f"https://www.credly.com/badges/{bid}" if bid else None
              name = get(b,"name") or get(b,"badge_template","name") or "Badge"
              if img and link:
                  items.append({"dt":dt,"img":img,"link":link,"name":name})

          items.sort(key=lambda x:x["dt"], reverse=True)
          seen=set(); uniq=[]
          for it in items:
              if it["link"] in seen: continue
              seen.add(it["link"]); uniq.append(it)

          cells=[]
          outdir=Path("badges")
          for it in uniq:
              local=download_image(it["img"], outdir)
              cells.append(f'<a href="{it["link"]}"><img src="{local}" alt="{html.escape(it["name"],quote=True)}" height="88"></a>')
          new_block = "<p align=\"left\">\n  " + "\n  ".join(cells) + "\n</p>\n"

          # 2) Replace between markers (unconditional)
          rp=Path("README.md")
          txt=rp.read_text(encoding="utf-8-sig")
          s=txt.find(START); e=txt.find(END)
          if s==-1 or e==-1 or e<s:
              txt = txt.rstrip()+"\n\n## Verified badges\n"+START+"\n"+new_block+END+"\n"
          else:
              s_end = s + len(START)
              txt = txt[:s_end] + "\n" + new_block + txt[e:]
          rp.write_text(txt, encoding="utf-8")
          print(f"BADGES: rendered={len(cells)} (wrote README.md)")
          PY

      - name: Run, show diff, commit, push
        run: |
          set -e
          python3 credly_update.py

          echo "----- README diff preview -----"
          git diff -- README.md | sed -n '1,200p' || true
          echo "--------------------------------"

          # Configure bot identity (local, not global)
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          git add README.md badges || true
          if git diff --cached --quiet; then
            echo "No staged changes. (README may already match.)"
            exit 0
          fi

          # Rebase in case remote changed after checkout
          git pull --rebase --autostash origin main || true
          git commit -m "chore: update Credly badges"
          git push origin HEAD:main
